// <auto-generated />
using System;
using Entities.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220901233754_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Fridge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FridgeModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FridgeModelId");

                    b.ToTable("Fridges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            FridgeModelId = new Guid("91b72841-5ce0-4556-ae8d-ac6c2cb3a126"),
                            Name = "Bosch",
                            OwnerName = "Anna"
                        },
                        new
                        {
                            Id = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            FridgeModelId = new Guid("770e8bf1-3c52-4e68-b441-027501583ce2"),
                            Name = "Vestfrost",
                            OwnerName = "Vlada"
                        },
                        new
                        {
                            Id = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            FridgeModelId = new Guid("7158ca91-4000-4256-9182-048a8b850143"),
                            Name = "Beko",
                            OwnerName = "Anna"
                        },
                        new
                        {
                            Id = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            FridgeModelId = new Guid("63b1a8ab-1dcd-41ba-be31-b64ea07eaa9d"),
                            Name = "Philips",
                            OwnerName = "Anna"
                        },
                        new
                        {
                            Id = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            FridgeModelId = new Guid("6120df35-3a32-4465-83d9-02d90769dc12"),
                            Name = "Indesit",
                            OwnerName = "Vlada"
                        });
                });

            modelBuilder.Entity("Entities.Models.FridgeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FridgeModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63b1a8ab-1dcd-41ba-be31-b64ea07eaa9d"),
                            Name = "TH-803",
                            Year = 2016
                        },
                        new
                        {
                            Id = new Guid("d5a11ba1-f080-46f0-aaed-510972099ef3"),
                            Name = "514-NWE",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("5ce2abb4-6d21-4c85-8cdc-ccedff9b2dad"),
                            Name = "RC-54",
                            Year = 2013
                        },
                        new
                        {
                            Id = new Guid("c78db094-fd33-4492-b3a3-0515d141c25d"),
                            Name = "XM 4021-000",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("ce2635aa-2f6c-4ce5-a1ba-af7c0991753e"),
                            Name = "DF 5180 W",
                            Year = 2015
                        },
                        new
                        {
                            Id = new Guid("e91340aa-0634-4c22-a7fb-7a4335f193d4"),
                            Name = "DS 333020",
                            Year = 2011
                        },
                        new
                        {
                            Id = new Guid("b102fe85-fa02-436a-a2f9-e30fc83abd2b"),
                            Name = "VF 466 EB",
                            Year = 2014
                        },
                        new
                        {
                            Id = new Guid("770e8bf1-3c52-4e68-b441-027501583ce2"),
                            Name = "KGN36S55",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("6120df35-3a32-4465-83d9-02d90769dc12"),
                            Name = "RB-34 K6220SS",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("bf864c03-2f70-482e-9505-3dcfcd1a9ac8"),
                            Name = "VF 910 X",
                            Year = 2014
                        },
                        new
                        {
                            Id = new Guid("7158ca91-4000-4256-9182-048a8b850143"),
                            Name = "Electric MR-CR46G-HS-R",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("bc45989d-5ef9-4cd0-85e9-ed54701bef17"),
                            Name = "RF-61 K90407F",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("4079bcea-c1fc-42a5-b220-981e9b083b4d"),
                            Name = "SBS 7212",
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("5175e5fe-fcc9-4041-8043-62fc5c71fbaf"),
                            Name = "VF 395-1 SBS",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("91b72841-5ce0-4556-ae8d-ac6c2cb3a126"),
                            Name = "RSA1SHVB1",
                            Year = 2018
                        });
                });

            modelBuilder.Entity("Entities.Models.FridgeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FridgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("ProductId");

                    b.ToTable("FridgeProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bfe180a-be37-4efa-99b9-2766a5c9f74f"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("740ccb3d-5c6e-41c8-9be9-2dc003ece707"),
                            Quantity = 11
                        },
                        new
                        {
                            Id = new Guid("262a3b91-6791-4806-ab7d-db6a0cc46835"),
                            FridgeId = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            ProductId = new Guid("32e54047-db5f-43ed-afcd-43a8ab7692a8"),
                            Quantity = 13
                        },
                        new
                        {
                            Id = new Guid("ce98eadd-a1be-44c9-ace6-3f810a6b6cd3"),
                            FridgeId = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            ProductId = new Guid("0f125d2e-d071-4119-95d7-77fc9e46e7a4"),
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("1c89abbb-7ccc-430d-9d24-1d94f8c374b1"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("d6662ea2-60e2-47a9-9685-eeedf476e6b1"),
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("400bbeb2-2ae7-4a55-bc58-98abcfb34ade"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("69512c08-faa8-4c94-a259-917df81555cf"),
                            Quantity = 24
                        },
                        new
                        {
                            Id = new Guid("893c0c20-ef0d-48c3-87ef-bfbc0394984c"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("e9b648d8-d1f6-4f6e-a335-4432b06838d5"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("acfc1ae6-5edb-4fe1-b90a-ee3a526bd1bb"),
                            FridgeId = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            ProductId = new Guid("e9b648d8-d1f6-4f6e-a335-4432b06838d5"),
                            Quantity = 22
                        },
                        new
                        {
                            Id = new Guid("6abe6dc8-08a9-4374-94ae-9f5fa1e857dc"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("740ccb3d-5c6e-41c8-9be9-2dc003ece707"),
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("ac1858d8-e549-4059-a38f-7b3c51529204"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("740ccb3d-5c6e-41c8-9be9-2dc003ece707"),
                            Quantity = 14
                        },
                        new
                        {
                            Id = new Guid("54a47864-924e-42fe-87a5-114b9701dcd3"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("32e54047-db5f-43ed-afcd-43a8ab7692a8"),
                            Quantity = 21
                        },
                        new
                        {
                            Id = new Guid("90348dd2-506d-469e-b9fe-5b92d974ea26"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("0f125d2e-d071-4119-95d7-77fc9e46e7a4"),
                            Quantity = 13
                        },
                        new
                        {
                            Id = new Guid("8462d265-e2e6-4853-ba65-8552805bef2a"),
                            FridgeId = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            ProductId = new Guid("0f125d2e-d071-4119-95d7-77fc9e46e7a4"),
                            Quantity = 12
                        },
                        new
                        {
                            Id = new Guid("2a6e7fa3-63d0-443d-98ea-1898cd7138e6"),
                            FridgeId = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            ProductId = new Guid("5fd00212-1985-41eb-9f57-36dc7e1541f8"),
                            Quantity = 6
                        },
                        new
                        {
                            Id = new Guid("bd18215a-48c2-4f9a-8c77-3501ffdcd571"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("8221e424-5e13-46cd-9b94-3824a7da5b31"),
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("b1e5a4b0-45c1-49d9-90ca-42241df61d57"),
                            FridgeId = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            ProductId = new Guid("d6662ea2-60e2-47a9-9685-eeedf476e6b1"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("d7600561-b48a-4a2d-a1f1-e30bbdc0a1c6"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("69512c08-faa8-4c94-a259-917df81555cf"),
                            Quantity = 17
                        },
                        new
                        {
                            Id = new Guid("31d3d3dc-4994-4ff8-9653-5bb9e877ad3f"),
                            FridgeId = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            ProductId = new Guid("d6662ea2-60e2-47a9-9685-eeedf476e6b1"),
                            Quantity = 27
                        },
                        new
                        {
                            Id = new Guid("ea77b198-4d7e-476f-8641-4f1342f2fb9c"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("d2706ca5-5a3f-47be-a3ff-735ba9d0df03"),
                            Quantity = 25
                        },
                        new
                        {
                            Id = new Guid("490ffb37-9ec8-44e1-88c5-9c7bc417088b"),
                            FridgeId = new Guid("1dd3994b-2d43-4ab7-bf0c-d71699fe45cd"),
                            ProductId = new Guid("9539614d-aec7-4747-a754-3a1375e59b3e"),
                            Quantity = 9
                        },
                        new
                        {
                            Id = new Guid("97693042-2622-4692-87d5-940b451f8d42"),
                            FridgeId = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            ProductId = new Guid("8221e424-5e13-46cd-9b94-3824a7da5b31"),
                            Quantity = 18
                        },
                        new
                        {
                            Id = new Guid("af80407a-2bc2-446c-ab18-b73867fc5390"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("8221e424-5e13-46cd-9b94-3824a7da5b31"),
                            Quantity = 11
                        },
                        new
                        {
                            Id = new Guid("3353e578-ed10-423f-b2dc-6046b668b8e2"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("9539614d-aec7-4747-a754-3a1375e59b3e"),
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("69046c3e-7b03-4722-bad9-1c697a28933e"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("5fd00212-1985-41eb-9f57-36dc7e1541f8"),
                            Quantity = 13
                        },
                        new
                        {
                            Id = new Guid("e7bb99af-386f-4992-8e0e-647016e658f6"),
                            FridgeId = new Guid("d0a3dc0a-db1f-4672-b92e-9318aece6e68"),
                            ProductId = new Guid("e9b648d8-d1f6-4f6e-a335-4432b06838d5"),
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("f43119a2-74a7-4c38-85bb-005275bff9b7"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("32e54047-db5f-43ed-afcd-43a8ab7692a8"),
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("4f9c54d5-b56e-430a-904f-c72e8e4d74e0"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("d6662ea2-60e2-47a9-9685-eeedf476e6b1"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("ddb68e55-4ad8-4133-9575-08dc486bae83"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("5fd00212-1985-41eb-9f57-36dc7e1541f8"),
                            Quantity = 6
                        },
                        new
                        {
                            Id = new Guid("7f08ce39-bc75-49ef-8dc9-c2dd8df3be2f"),
                            FridgeId = new Guid("85d19b94-a402-4374-9c93-71d58533e6fc"),
                            ProductId = new Guid("d2706ca5-5a3f-47be-a3ff-735ba9d0df03"),
                            Quantity = 11
                        },
                        new
                        {
                            Id = new Guid("faba721f-780c-4118-af74-38173179bc03"),
                            FridgeId = new Guid("77fb7ae5-14cc-44c2-9c42-98a10323fc3d"),
                            ProductId = new Guid("69512c08-faa8-4c94-a259-917df81555cf"),
                            Quantity = 22
                        },
                        new
                        {
                            Id = new Guid("a0ec0292-8450-4048-b0a9-b48e1cfafaf7"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("32e54047-db5f-43ed-afcd-43a8ab7692a8"),
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("6e444720-0154-4f71-900f-9b619aa3e166"),
                            FridgeId = new Guid("588a11f6-14d3-4613-ac3f-f03690105d72"),
                            ProductId = new Guid("9539614d-aec7-4747-a754-3a1375e59b3e"),
                            Quantity = 7
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefaultQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f125d2e-d071-4119-95d7-77fc9e46e7a4"),
                            DefaultQuantity = 6,
                            ImageSource = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Assorted_bread.jpg/274px-Assorted_bread.jpg",
                            Name = "Bread"
                        },
                        new
                        {
                            Id = new Guid("e9b648d8-d1f6-4f6e-a335-4432b06838d5"),
                            DefaultQuantity = 14,
                            ImageSource = "https://id-test-11.slatic.net/p/70f40d8f77f844671af4a5a11755e7ae.jpg",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("d6662ea2-60e2-47a9-9685-eeedf476e6b1"),
                            DefaultQuantity = 13,
                            ImageSource = "https://media.istockphoto.com/vectors/yogurt-cup-with-spoon-vector-id1060883416?k=20&m=1060883416&s=612x612&w=0&h=nhPJA8XYohdkGbBojLt72e_q9sbgBuO6mUI-7cnuu6s=",
                            Name = "Yoghurt"
                        },
                        new
                        {
                            Id = new Guid("740ccb3d-5c6e-41c8-9be9-2dc003ece707"),
                            DefaultQuantity = 8,
                            ImageSource = "https://www.collinsdictionary.com/images/full/egg_110803370.jpg",
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("32e54047-db5f-43ed-afcd-43a8ab7692a8"),
                            DefaultQuantity = 16,
                            ImageSource = "https://cdn.yamatoscale.com/wp-content/uploads/2016/04/K%C3%A4se-Scheiben_01_00_OH-1.jpg",
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("5fd00212-1985-41eb-9f57-36dc7e1541f8"),
                            DefaultQuantity = 5,
                            ImageSource = "https://4.imimg.com/data4/JX/UQ/ANDROID-47104262/product-500x500.jpeg",
                            Name = "Mashroom"
                        },
                        new
                        {
                            Id = new Guid("9539614d-aec7-4747-a754-3a1375e59b3e"),
                            DefaultQuantity = 6,
                            ImageSource = "https://food.fnr.sndimg.com/content/dam/images/food/fullset/2010/5/1/0/0039592F3_beer-can-chicken_s4x3.jpg.rend.hgtvcom.616.462.suffix/1382539274625.jpeg",
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = new Guid("8221e424-5e13-46cd-9b94-3824a7da5b31"),
                            DefaultQuantity = 13,
                            ImageSource = "https://www.thespruceeats.com/thmb/OueG44zJ3LnwQt9HwVXmmT6mkNM=/3067x3067/smart/filters:no_upscale()/roasted-boneless-pork-loin-recipe-995289-hero-01-93314ca221a54ecebc45a17e99cb78c4.jpg",
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("d2706ca5-5a3f-47be-a3ff-735ba9d0df03"),
                            DefaultQuantity = 10,
                            ImageSource = "https://hips.hearstapps.com/hmg-prod/images/delish-roast-beef-horizontal-1540505165.jpg",
                            Name = "Beef"
                        },
                        new
                        {
                            Id = new Guid("69512c08-faa8-4c94-a259-917df81555cf"),
                            DefaultQuantity = 11,
                            ImageSource = "https://www.crescentfoods.lk/images/products/PREMIUM_CHICKEN_SAUSAGES.jpg",
                            Name = "Sausage"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1508a75c-adb5-49a7-afde-99a5a09813c0",
                            ConcurrencyStamp = "a3536628-74a0-4f8d-850f-8dbd7df24476",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9ae38d66-790c-4aa6-b75f-8006398b58a8",
                            ConcurrencyStamp = "dbf1333e-1937-4936-a056-560fd6c9353e",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Fridge", b =>
                {
                    b.HasOne("Entities.Models.FridgeModel", "FridgeModel")
                        .WithMany("Fridges")
                        .HasForeignKey("FridgeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FridgeModel");
                });

            modelBuilder.Entity("Entities.Models.FridgeProduct", b =>
                {
                    b.HasOne("Entities.Models.Fridge", "Fridge")
                        .WithMany("Products")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("Fridges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Fridge", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.FridgeModel", b =>
                {
                    b.Navigation("Fridges");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Fridges");
                });
#pragma warning restore 612, 618
        }
    }
}
